openapi: "3.0.0"
servers:
  - url: 'https://ubademy-14-prod.herokuapp.com/'
info:
  description: User auth tiene la responsabilidad de crear y mantener la informacion del usuario
  version: 0.2.0
  title: User auth

tags:
  - name: User
    description: Operaciones sobre usuarios

paths:
  '/users':
    'post':
      tags:
        - User
      description:
        Genera usuario nuevo
      requestBody:
        description: body para la creacion de usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreate'
      responses:
        '200':
          description: User creado correctamente
        '400':
          description: Bad Request
    'get':
      tags:
        - User
      description: Obtiene la informacion de un usuario
      parameters:
        - in: query
          name: email
          required: false
          example: 'ubademy.14@gmail.com'
        - in: query
          name: id
          required: false
          example: 27
        - in: header
          name: x-access-token
          required: false
          description: token recibido de login, en caso que no este el email va a chequear el token
      responses:
        '200':
          description: User obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userRetrieved'
        '400':
          description: No se encontro al usuario
    'patch':
      tags:
        - User
      description:
        Modifica usuario existente
      requestBody:
        description: Body para el patch del usuario, el email es obligatorio
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRetrieved'
      responses:
        '200':
          description: User creado correctamente
        '400':
          description: Bad Request
  '/users/login':
    'post':
      tags:
        - User
      description: Modifica a usuario existente
      requestBody:
        description: Body para el login del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
      responses:
        '200':
          description: User modificado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginSuccessful'
        '400':
          description: Invalid username or password
        '403':
          description: Usuario esta blockeado
  '/users/login/admin':
    'post':
      tags:
        - User
      description: Modifica a usuario existente
      requestBody:
        description: Body para el login del usuario admin
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
      responses:
        '200':
          description: User loggeado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginSuccessful'
        '400':
          description: Invalid username or password
        '401':
          description: Usuario no existe o no es administrador
  '/users/change-password':
    'patch':
      tags:
        - User
      description: Modifica password de usuario existente
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
      requestBody:
        description: Body para cambio de contraseña
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePassword'
      responses:
        '200':
          description: User modificado correctamente
        '400':
          description: Invalid username or password
        '401':
          description: Token invalido
        '403':
          description: No token provisto
  '/users/delete-user':
    'delete':
      tags:
        - User
      description: Elimina usuario existente
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
      requestBody:
        description: Body para eliminar usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteUser'
      responses:
        '200':
          description: User eliminado correctamente
        '400':
          description: Invalid username or password
        '401':
          description: Token invalido
        '403':
          description: No token provisto
  '/users/send-email-reset-password':
    'post':
      tags:
        - User
      description: Envia mail para recuperar contraseña de usuario existente
      parameters:
        - in: query
          name: email
          required: true
          description: email del usuario
      responses:
        '200':
          description: mail enviado correctamente
        '400':
          description: Invalid username
        '503':
          description: fallo envio de mail
  '/users/recreate-password':
    'post':
      tags:
        - User
      description: Modifica password de usuario existente
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido por mail
      requestBody:
        description: Body para cambio de contraseña
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/regeneratePassword'
      responses:
        '200':
          description: User modificado correctamente
        '400':
          description: New password invalido
        '401':
          description: Token invalido
        '403':
          description: No token provisto
  '/users/login/firebase':
    'post':
      tags:
        - User
      description: Termina el login por parte de usuarios usando firebase
      requestBody:
        description: Body obtenido de firebase
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/firebase'
      responses:
        '200':
          description: User loggeado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginSuccessful'
        '400':
          description: Datos de usuario invalidos
        '503':
          description: Error desconocido
  '/users/{id}':
    'delete':
      tags:
        - User
      description: Bloquea usuario existente desde el admin
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
        - in: path
          name: id
          required: true
          description: id del usuario a eliminar
          example: 303456
      responses:
        '200':
          description: User eliminado correctamente
        '401':
          description: Token invalido
        '403':
          description: No token provisto
        '404':
          description: Usuario no encontrado
  '/users/unblock/{id}':
    'post':
      tags:
        - User
      description: Desbloquea usuario existente desde el admin
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
        - in: path
          name: id
          required: true
          description: id del usuario a eliminar
          example: 303456
      responses:
        '200':
          description: User eliminado correctamente
        '401':
          description: Token invalido
        '403':
          description: No token provisto
        '404':
          description: Usuario no encontrado
  '/users/all':
    'get':
      tags:
        - User
      description: Obtiene parametros
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
        - in: query
          name: blocked
          description: usuario es bloqueado
        - in: query
          name: email
          description: cercania a como es el email, no es necesario que sea exacto pero si bien escrito
          example: demy
        - in: query
          name: subscription
          description: subscripcion del usuario
        - in: query
          name: limit
          description: cantidad de usuarios para obtener maximo
        - in: query
          name: offset
          description: offset para los usuarios

      responses:
        '200':
          description: Users que cumplen con los filtros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersRetrieved'
        '401':
          description: Token invalido
        '403':
          description: No token provisto

  '/users/add-admin':
    'post':
      tags:
        - User
      description: Bloquea usuario existente desde el admin
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
      requestBody:
        description: body para la creacion de usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreate'
      responses:
        '200':
          description: Admin agregado correctamente
        '400':
          description: Bad request
        '401':
          description: Token invalido
        '403':
          description: No token provisto
        '404':
          description: Usuario no encontrado
  '/users/set-token':
    'post':
      tags:
        - User
      description: Bloquea usuario existente desde el admin
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
      requestBody:
        description: body para la creacion de usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
          description: Admin agregado correctamente
        '400':
          description: Bad request
        '401':
          description: Token invalido
        '403':
          description: No token provisto
  '/users/upgrade-subscription':
    'post':
      tags:
        - User
      description: Upgradea usuario a nueva version
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token recibido de login
      requestBody:
        description: body para el upgrade del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subs'
      responses:
        '200':
          description: transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseFromPayments'

        '400':
          description: Bad request
        '401':
          description: Token invalido
        '403':
          description: No token provisto
        '500':
          description: No se pudo generar la transaccion

components:
  schemas:
    userCreate:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          example: 'pepe'
        last_name:
          type: string
          example: pepardo
        password:
          type: string
          example: '0303456Branca'
        email:
          type: string
          example: 'ubademy.14@gmail.com'
        location:
          type: string
          example: 'transilvania'
        interest:
          type: string
          example: 'math, poker, drugs'
    userLogin:
      type:
        object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: 'ubademy.14@gmail.com'
        password:
          type: string
          example: '0303456Branca'

    loginSuccessful:
      type: object
      properties:
        token:
          type: string
          description: token to be used on future request
        message:
          type: string
          example: 'user ubdaemy.14@gmail.com is logged correctly'
        status:
          type: integer
          example: 200
    userRetrieved:
      type: object
      properties:
        user_id:
          type: integer
          example: 3
        first_name:
          type: string
          example: 'pepe'
        last_name:
          type: 'string'
          example: pepardo
        interest:
          type: string
          example: 'merca'
        email:
          type: string
          example: 'ubademy.14@gmail.com'
        location:
          type: string
          example: 'transilvania'
        photo_url:
          type: string
          description: URL de la foto del usuario
        subscription:
          type: string
          description: Tipo de subscripcion del usuario
        is_admin:
          type: boolean
          description: Define si el usuario es admin
        is_blocked:
          type: boolean
          description: Define si el usuario esta blockeado o no
        created_at:
          type: string
          description: Hora en el que el usuario fue creado
    changePassword:
      type: object
      properties:
        password:
          type: string
          example: 'oldPassword'
        newPassword:
          type: string
          example: 'newPassword'
    deleteUser:
      type: object
      properties:
        password:
          type: string
          example: 'currentPassword'
    regeneratePassword:
      type: object
      properties:
        newPassword:
          type: string
          example: 'newPassword'
    firebase:
      type: object
      required: true
      properties:
        displayName:
          type: string
          required: true
          description: Nombre del usuario escrito de manera "Nombre Apellido"
          example: Branca Algunos Apellidos
        email:
          required: true
          type: string
          description: email del usuario
          example: ubdaemy.14@gmail.com
        photoURL:
          type: string
          description: URL de la foto del usuario
    usersRetrieved:
      type: object
      properties:
        total:
          type: integer
          example: 5
          description: cantidad de usuarios obtenidos
        limit:
          type: integer
          example: 10
          description: cantidad de usuarios obtenidos
        offset:
          type: integer
          example: 5
          description: cantidad de usuarios obtenidos
        usuarios:
          type: object
          description: array de usuarios obtenidos
          properties:
            usuario:
              description: usuario obtenido
              type: object
              example:
                $ref: '#/components/schemas/userRetrieved'
    token:
      type: object
      properties:
        token:
          type: string
          description: 'Token provisto por firebase para notificaciones'
    subs:
      type: object
      properties:
        subscription:
          type: string
          example: 'basico|estandar|premium'
    responseFromPayments:
      type: object
      properties:
        txn_hash:
          type: string
          description: transaction hash a ser devuelto para que el usuario pueda chequear el estado de su transaccion desde su wallet
